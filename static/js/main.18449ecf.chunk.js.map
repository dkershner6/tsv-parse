{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","tsvValue","setTsvValue","parsedResult","useMemo","length","parse","headerRow","renderLine","line","error","className","colSpan","fieldNames","errorMessage","Object","values","parsedLine","map","value","Container","href","Row","Col","Form","Group","controlId","Label","Control","as","rows","onChange","event","target","Table","fieldName","lines","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yQA8GeA,G,MAzGH,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACPC,EADO,KACGC,EADH,KAGRC,EAAeC,mBAAQ,WACzB,OAAIH,EAASI,OAAS,EACXC,gBAAML,EAAU,CAAEM,WAAW,IAEjC,OACR,CAACN,IAuBEO,EAAa,SAACC,GAChB,OAAIA,EAAKC,MAED,wBAAIC,UAAU,gBACV,wBAAIC,QAAST,EAAaU,WAAWR,QAChCI,EAAKK,eAMlB,wBAAIH,UAAU,iBACTI,OAAOC,OAAOP,EAAKQ,YAAYC,KAAI,SAACC,GAAD,OAChC,4BAAKA,QAarB,OACI,kBAACC,EAAA,EAAD,KACI,gCACI,wBAAIT,UAAU,aAAd,cACA,wCACe,IACX,uBAAGU,KAAK,2CAAR,eAKR,8BACI,kBAACC,EAAA,EAAD,CAAKX,UAAU,QACX,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,cAClB,kBAACF,EAAA,EAAKG,MAAN,0FAIA,kBAACH,EAAA,EAAKI,QAAN,CACIC,GAAG,WACHC,KAAM,GACNX,MAAOlB,EACP8B,SAAU,SAACC,GAAD,OACN9B,EAAY8B,EAAMC,OAAOd,aAM7C,kBAACG,EAAA,EAAD,CAAKX,UAAU,QACX,kBAACY,EAAA,EAAD,KA7EPpB,EAKD,kBAAC+B,EAAA,EAAD,KACI,+BACI,4BACK/B,EAAaU,WAAWK,KAAI,SAACiB,GAAD,OACzB,4BAAKA,QAIjB,+BACKhC,EAAaiC,MAAMlB,KAAI,SAACT,GAAD,OAAUD,EAAWC,QAb9C,OA8EH,kBAACa,EAAA,EAAD,CAAKX,UAAU,QACVR,GACG,kBAACoB,EAAA,EAAD,KACI,iDAIZ,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KA/CPpB,EAGE,6BAAMkC,KAAKC,UAAUnC,EAAc,KAAM,IAFrC,WC7CCoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDkItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAM+C,c","file":"static/js/main.18449ecf.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { Container, Row, Col, Form, Table } from 'react-bootstrap';\nimport { parse, TSVLineResult } from 'tsv-parse';\nimport './bootstrap.css';\n\nconst App = () => {\n    const [tsvValue, setTsvValue] = useState('');\n\n    const parsedResult = useMemo(() => {\n        if (tsvValue.length > 0) {\n            return parse(tsvValue, { headerRow: true });\n        }\n        return null;\n    }, [tsvValue]);\n\n    const renderTable = () => {\n        if (!parsedResult) {\n            return null;\n        }\n\n        return (\n            <Table>\n                <thead>\n                    <tr>\n                        {parsedResult.fieldNames.map((fieldName) => (\n                            <th>{fieldName}</th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {parsedResult.lines.map((line) => renderLine(line))}\n                </tbody>\n            </Table>\n        );\n    };\n\n    const renderLine = (line: TSVLineResult) => {\n        if (line.error) {\n            return (\n                <tr className=\"table-danger\">\n                    <td colSpan={parsedResult.fieldNames.length}>\n                        {line.errorMessage}\n                    </td>\n                </tr>\n            );\n        }\n        return (\n            <tr className=\"table-success\">\n                {Object.values(line.parsedLine).map((value) => (\n                    <td>{value}</td>\n                ))}\n            </tr>\n        );\n    };\n\n    const renderJson = () => {\n        if (!parsedResult) {\n            return null;\n        }\n        return <pre>{JSON.stringify(parsedResult, null, 2)}</pre>;\n    };\n\n    return (\n        <Container>\n            <header>\n                <h1 className=\"display-3\">TSV Parser</h1>\n                <p>\n                    Powered by{' '}\n                    <a href=\"https://github.com/dkershner6/tsv-parse\">\n                        tsv-parse\n                    </a>\n                </p>\n            </header>\n            <main>\n                <Row className=\"mt-5\">\n                    <Col>\n                        <Form.Group controlId=\"tsvToParse\">\n                            <Form.Label>\n                                Paste from your favorite spreadsheet program\n                                (Make sure it has a header, for now)\n                            </Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                rows={10}\n                                value={tsvValue}\n                                onChange={(event) =>\n                                    setTsvValue(event.target.value)\n                                }\n                            />\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <Row className=\"mt-3\">\n                    <Col>{renderTable()}</Col>\n                </Row>\n                <Row className=\"mt-3\">\n                    {parsedResult && (\n                        <Col>\n                            <h4>The JSON result</h4>\n                        </Col>\n                    )}\n                </Row>\n                <Row>\n                    <Col>{renderJson()}</Col>\n                </Row>\n            </main>\n        </Container>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}